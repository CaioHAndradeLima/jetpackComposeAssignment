package com.example.jetpackcomposeassignment.feature_listcat.presentation.detailimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.jetpackcomposeassignment.common.RequestResourceimport com.example.jetpackcomposeassignment.feature_listcat.domain.CatUseCasesimport com.example.jetpackcomposeassignment.feature_listcat.presentation.cats.CatEventimport com.example.jetpackcomposeassignment.feature_listcat.presentation.cats.CatStateimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.Jobimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.StateFlowimport kotlinx.coroutines.flow.asStateFlowimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass CatDetailViewModel @Inject constructor(    private val catUsesCase: CatUseCases,) : ViewModel() {    private val _catState = MutableStateFlow<CatState>(CatState.Loading)    val catState: StateFlow<CatState> = _catState.asStateFlow()    fun on(event: CatDetailEvent) {        when (event) {            is CatDetailEvent.FindOneCat -> {                getOneCat(event.id)            }        }    }    private fun getOneCat(id: String) {        catUsesCase.getOneCat(id = id).onEach { currentResult ->            when (currentResult) {                is RequestResource.Success -> {                    _catState.value = CatState.CatSuccess(currentResult.data!!)                }                is RequestResource.Error -> {                    _catState.value = CatState.TryAgain(currentResult.message)                }                is RequestResource.Loading -> {                    _catState.value = CatState.Loading                }            }        }.launchIn(viewModelScope)    }}