package com.example.jetpackcomposeassignment.feature_listcat.presentation.cats.composableimport android.content.res.Configurationimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.lazy.grid.GridCellsimport androidx.compose.foundation.lazy.grid.LazyVerticalGridimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.Surfaceimport androidx.compose.runtime.Composableimport androidx.compose.runtime.collectAsStateimport androidx.compose.runtime.getValueimport androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.ui.Modifierimport androidx.compose.ui.platform.LocalConfigurationimport androidx.hilt.navigation.compose.hiltViewModelimport androidx.navigation.NavControllerimport com.example.jetpackcomposeassignment.common.composable.DefaultTopBarimport com.example.jetpackcomposeassignment.common.composable.ProgressComponentimport com.example.jetpackcomposeassignment.common.composable.TryAgainComponentimport com.example.jetpackcomposeassignment.feature_listcat.data.model.Catimport com.example.jetpackcomposeassignment.feature_listcat.presentation.cats.CatListStateimport com.example.jetpackcomposeassignment.feature_listcat.presentation.cats.CatViewModel@OptIn(ExperimentalMaterial3Api::class)@Composablefun CatListScreen(    onClick: (Cat) -> Unit,    viewModel: CatViewModel = hiltViewModel()) {    val state by viewModel.catListState.collectAsState()    val isHorizontal = LocalConfiguration.current.orientation == Configuration.ORIENTATION_LANDSCAPE    Scaffold(        topBar = { DefaultTopBar() },        content = { padding ->            Surface(modifier = Modifier.padding(padding)) {                when (state) {                    is CatListState.Loading -> ProgressComponent()                    is CatListState.TryAgain -> TryAgainComponent(                        (state as CatListState.TryAgain).errorMessage                    )                    is CatListState.CatListSuccess -> LazyVerticalGrid(                        modifier = Modifier                            .fillMaxSize(),                        columns = GridCells.Fixed(if (isHorizontal) 3 else 2)                    ) {                        val listCats = (state as CatListState.CatListSuccess).cats                        items(listCats.size) { index ->                            CatListItem(                                cat = listCats[index],                                onItemClick = onClick                            )                        }                    }                }            }        }    )}