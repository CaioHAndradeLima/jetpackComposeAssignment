package com.example.jetpackcomposeassignment.feature_listcat.presentation.detailimport android.content.res.Configurationimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.aspectRatioimport androidx.compose.foundation.layout.fillMaxHeightimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.rememberScrollStateimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.verticalScrollimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Surfaceimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.layout.onGloballyPositionedimport androidx.compose.ui.layout.positionInParentimport androidx.compose.ui.platform.LocalConfigurationimport androidx.compose.ui.res.stringResourceimport androidx.compose.ui.text.SpanStyleimport androidx.compose.ui.text.buildAnnotatedStringimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.text.withStyleimport androidx.compose.ui.unit.dpimport com.example.jetpackcomposeassignment.Rimport com.example.jetpackcomposeassignment.common.CatUrlimport com.example.jetpackcomposeassignment.common.composable.CoilImageComponentimport com.example.jetpackcomposeassignment.common.composable.FlowRowimport com.example.jetpackcomposeassignment.common.composable.TagComponentimport com.example.jetpackcomposeassignment.feature_listcat.domain.use_case.CatDetailView@Composablefun CatDetailComponent(    cat: CatDetailView,    scrollAlphaListener: (newAlpha: Float) -> Unit) {    val isHorizontal = LocalConfiguration.current.orientation == Configuration.ORIENTATION_LANDSCAPE    Column(        modifier = Modifier            .fillMaxSize()            .verticalScroll(rememberScrollState())            .onGloballyPositioned { coordinates ->                if(isHorizontal) {                    scrollAlphaListener(1.toFloat())                    return@onGloballyPositioned                }                var value = coordinates.positionInParent().getDistance() / 10                if(value > 20) {                    if(value > 100) {                        value = 100F                    }                    scrollAlphaListener(((value * 0.01).toFloat()))                }            }    ) {        if (isHorizontal) {            Row(                modifier = Modifier                    .fillMaxWidth()                    .padding(bottom = 16.dp, top = 72.dp, start = 16.dp)            ) {                Column {                    val width = (LocalConfiguration.current.screenHeightDp * 0.9)                    CoilImageComponent(                        imageUrl = "${CatUrl.PICTURE}${cat.id}",                        modifier = Modifier                            .aspectRatio(1f)                            .clip(shape = RoundedCornerShape(4.dp))                            .width(width.dp)                            .height(width.dp),                        boxModifier = Modifier                            .clip(shape = RoundedCornerShape(4.dp))                            .width(width.dp)                            .height(width.dp),                    )                    Text(                        text = cat.date,                        textAlign = TextAlign.Left,                        style = MaterialTheme.typography.bodyMedium,                        color = MaterialTheme.colorScheme.tertiary,                        modifier = Modifier                    )                }                Column(                    modifier = Modifier                        .fillMaxWidth()                ) {                    Text(                        text = cat.name,                        textAlign = TextAlign.Center,                        style = MaterialTheme.typography.headlineMedium,                        modifier = Modifier.padding(horizontal = 16.dp)                    )                    Text(                        text = cat.description,                        textAlign = TextAlign.Justify,                        style = MaterialTheme.typography.bodyLarge,                        modifier = Modifier                            .fillMaxWidth()                            .padding(horizontal = 16.dp, vertical = 8.dp)                    )                    Spacer(modifier = Modifier.width(8.dp))                    Text(                        text = stringResource(id = R.string.tags),                        textAlign = TextAlign.Start,                        style = MaterialTheme.typography.headlineSmall,                        modifier = Modifier                            .fillMaxWidth()                            .padding(16.dp)                    )                    Surface(modifier = Modifier.padding(horizontal = 16.dp)) {                        FlowRow(horizontalGap = 8.dp, verticalGap = 8.dp) {                            cat.tags.forEach {                                TagComponent(                                    tagText = it                                )                            }                        }                    }                }            }        } else {            CoilImageComponent(                imageUrl = "${CatUrl.PICTURE}${cat.id}",                modifier = Modifier                    .fillMaxWidth()                    .height((LocalConfiguration.current.screenWidthDp * 1.30).dp),                contentScale = ContentScale.FillBounds,                boxModifier = Modifier                    .fillMaxWidth()                    .height((LocalConfiguration.current.screenWidthDp * 1.30).dp)                    .clip(shape = RoundedCornerShape(bottomEnd = 4.dp, bottomStart = 4.dp))                    .background(Color.Gray),            )            Text(                text = cat.date,                textAlign = TextAlign.Right,                style = MaterialTheme.typography.bodyMedium,                color = MaterialTheme.colorScheme.tertiary,                modifier = Modifier                    .fillMaxWidth()                    .padding(horizontal = 16.dp, vertical = 4.dp)            )            Text(                text = cat.name,                textAlign = TextAlign.Center,                style = MaterialTheme.typography.headlineMedium,                modifier = Modifier                    .fillMaxWidth()                    .padding(16.dp)            )            Text(                text = cat.description,                textAlign = TextAlign.Justify,                style = MaterialTheme.typography.bodyLarge,                modifier = Modifier                    .fillMaxWidth()                    .padding(horizontal = 16.dp, vertical = 8.dp)            )            Spacer(modifier = Modifier.width(8.dp))            Text(                text = stringResource(id = R.string.tags),                textAlign = TextAlign.Start,                style = MaterialTheme.typography.headlineSmall,                modifier = Modifier                    .fillMaxWidth()                    .padding(16.dp)            )            Surface(modifier = Modifier.padding(horizontal = 16.dp)) {                FlowRow(horizontalGap = 8.dp, verticalGap = 8.dp) {                    cat.tags.forEach {                        TagComponent(                            tagText = it                        )                    }                }            }        }        Text(            text = stringResource(id = R.string.important_info),            textAlign = TextAlign.Start,            style = MaterialTheme.typography.headlineSmall,            modifier = Modifier                .fillMaxWidth()                .padding(16.dp)        )        cat.importantInfo.forEach { currentPair ->            Text(                text = buildAnnotatedString {                    withStyle(style = SpanStyle(fontWeight = FontWeight.Bold)) {                        append(currentPair.first)                    }                    append(" ${stringResource(id = currentPair.second)}")                },                textAlign = TextAlign.Start,                style = MaterialTheme.typography.bodyLarge,                modifier = Modifier                    .fillMaxWidth()                    .padding(horizontal = 16.dp, vertical = 4.dp)            )        }        Spacer(modifier = Modifier.height(32.dp))    }}