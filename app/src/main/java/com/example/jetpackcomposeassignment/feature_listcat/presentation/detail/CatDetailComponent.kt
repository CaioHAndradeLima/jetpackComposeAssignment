package com.example.jetpackcomposeassignment.feature_listcat.presentation.detailimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.rememberScrollStateimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.verticalScrollimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Surfaceimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.platform.LocalConfigurationimport androidx.compose.ui.res.stringResourceimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport com.example.jetpackcomposeassignment.Rimport com.example.jetpackcomposeassignment.common.CatUrlimport com.example.jetpackcomposeassignment.common.composable.CoilImageComponentimport com.example.jetpackcomposeassignment.common.composable.FlowRowimport com.example.jetpackcomposeassignment.common.composable.TagComponentimport com.example.jetpackcomposeassignment.feature_listcat.data.model.Cat@Composablefun CatDetailComponent(cat: Cat) {    Column(        modifier = Modifier            .fillMaxSize()            .verticalScroll(rememberScrollState())    ) {        CoilImageComponent(            imageUrl = "${CatUrl.PICTURE}${cat.id}",            modifier = Modifier                .fillMaxWidth()                .height((LocalConfiguration.current.screenWidthDp * 1.30).dp),            contentScale = ContentScale.FillBounds,            boxModifier = Modifier                .fillMaxWidth()                .height((LocalConfiguration.current.screenWidthDp * 1.30).dp)                .clip(shape = RoundedCornerShape(bottomEnd = 4.dp, bottomStart = 4.dp))                .background(Color.Gray),        )        Spacer(modifier = Modifier.width(8.dp))        Text(            text = stringResource(id = R.string.tags),            textAlign = TextAlign.Start,            style = MaterialTheme.typography.headlineSmall,            modifier = Modifier                .fillMaxWidth()                .padding(16.dp)        )        Surface(modifier = Modifier.padding(horizontal = 16.dp)) {            FlowRow(horizontalGap = 8.dp, verticalGap = 8.dp) {                cat.tags?.forEach {                    TagComponent(                        tagText = it                    )                }            }        }        Spacer(modifier = Modifier.height(32.dp))    }}