package com.example.jetpackcomposeassignment.feature_listcat.domain.repositoryimport com.example.jetpackcomposeassignment.feature_listcat.data.repository_remote.CatApiimport com.example.jetpackcomposeassignment.feature_listcat.data.model.Catimport com.example.jetpackcomposeassignment.feature_listcat.data.model.CatDetailimport com.example.jetpackcomposeassignment.feature_listcat.data.repository_remote.CatRepositoryimport javax.inject.Injectimport kotlin.random.Randomclass CatRepositoryImpl @Inject constructor(    private val api: CatApi) : CatRepository {    /**        Save information while app is running    */    companion object CacheLocal {        lateinit var listCat: List<Cat>    }    override suspend fun getCats(): List<Cat> {        return api.getCats().apply {            listCat = this.map {                it.copy(                    tags = it.tags?.filter { tag -> return@filter tag.isNotEmpty() }                )            }        }    }    override suspend fun getCat(id: String): CatDetail {        //I do not find a way to get more information by id from remote Api        val currentCat =  listCat.first { it.id == id }        return CatDetail(            id = currentCat.id,            mimetype = currentCat.mimetype,            tags = currentCat.tags,            name = "Abyssinian",            temperament = listOf("Active", "Energetic", "Independent", "Intelligent", "Gentle"),            origin = "Egypt",            date = "2024-03-12T15:30:00Z",            description = "The Abyssinian is easy to care for, and a joy to have in your home. Theyâ€™re affectionate cats and love both people and other animals.",            childFriendly = Random.nextBoolean(),            energyLevel = Random.nextInt(0, 10),            dogFriendly = Random.nextBoolean(),            strangerFriendly = Random.nextBoolean(),            acceptLap = Random.nextBoolean(),            indoor = Random.nextBoolean(),        )    }}