package com.example.jetpackcomposeassignment.feature_listcat.presentation.catsimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.jetpackcomposeassignment.common.RequestResourceimport com.example.jetpackcomposeassignment.feature_listcat.domain.CatUseCasesimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.asStateFlowimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.onEachimport javax.inject.Inject@HiltViewModelclass CatViewModel @Inject constructor(    private val catUsesCase: CatUseCases,) : ViewModel() {    private val _catListState = MutableStateFlow<CatListState>(CatListState.Loading)    val catListState = _catListState.asStateFlow()    init {        on(CatEvent.Start)    }    fun on(event: CatEvent) {        when (event) {            is CatEvent.Start -> {                getCats()            }        }    }    private fun getCats() {        catUsesCase.getCats().onEach { currentResult ->            when (currentResult) {                is RequestResource.Success -> {                    _catListState.value = CatListState.CatListSuccess(currentResult.data!!)                }                is RequestResource.Error -> {                    _catListState.value = CatListState.TryAgain(currentResult.message)                }                is RequestResource.Loading -> {                    _catListState.value = CatListState.Loading                }            }        }.launchIn(viewModelScope)    }}