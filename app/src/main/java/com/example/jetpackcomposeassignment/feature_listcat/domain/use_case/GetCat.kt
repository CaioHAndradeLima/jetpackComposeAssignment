package com.example.jetpackcomposeassignment.feature_listcat.domain.use_caseimport com.example.jetpackcomposeassignment.Rimport com.example.jetpackcomposeassignment.common.RequestResourceimport com.example.jetpackcomposeassignment.common.UiTextimport com.example.jetpackcomposeassignment.common.util.toErrorMessageimport com.example.jetpackcomposeassignment.feature_listcat.data.model.Catimport com.example.jetpackcomposeassignment.feature_listcat.data.repository_remote.CatRepositoryimport kotlinx.coroutines.flow.Flowimport kotlinx.coroutines.flow.flowimport retrofit2.HttpExceptionimport java.io.IOExceptionclass GetCat(    private val repository: CatRepository) {    operator fun invoke(        id: String    ): Flow<RequestResource<Cat>> = flow {        try {            emit(RequestResource.Loading())            val cats = repository.getCat(id)            emit(RequestResource.Success(cats))        } catch(e: HttpException) {            emit(RequestResource.Error(e.toErrorMessage()))        } catch(e: IOException) {            emit(RequestResource.Error(UiText.Resource(R.string.check_your_internet_connection)))        }    }}