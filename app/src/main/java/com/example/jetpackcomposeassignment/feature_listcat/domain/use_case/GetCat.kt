package com.example.jetpackcomposeassignment.feature_listcat.domain.use_caseimport com.example.jetpackcomposeassignment.Rimport com.example.jetpackcomposeassignment.common.RequestResourceimport com.example.jetpackcomposeassignment.common.UiTextimport com.example.jetpackcomposeassignment.common.util.getBooleanIconimport com.example.jetpackcomposeassignment.common.util.toErrorMessageimport com.example.jetpackcomposeassignment.common.util.toFormattedDateimport com.example.jetpackcomposeassignment.feature_listcat.data.model.CatDetailimport com.example.jetpackcomposeassignment.feature_listcat.data.repository_remote.CatRepositoryimport kotlinx.coroutines.flow.Flowimport kotlinx.coroutines.flow.flowimport retrofit2.HttpExceptionimport java.io.IOExceptionclass GetCat(    private val repository: CatRepository) {    operator fun invoke(        id: String    ): Flow<RequestResource<CatDetailView>> = flow {        try {            emit(RequestResource.Loading())            val cat = repository.getCat(id)            emit(RequestResource.Success(CatDetailView(                id = cat.id,                mimetype = cat.mimetype,                name = cat.name,                origin = cat.origin,                tags = cat.temperament.toMutableList().apply { addAll(cat.tags ?: listOf()) },                date = toFormattedDate(cat.date),                description = cat.description,                importantInfo = listOf(                    Pair(getBooleanIcon(cat.acceptLap), R.string.accept_lap),                    Pair(getBooleanIcon(cat.childFriendly), R.string.child_friendly),                    Pair(getBooleanIcon(cat.dogFriendly), R.string.dog_friendly),                    Pair(getBooleanIcon(cat.strangerFriendly), R.string.stranger_friendly),                    Pair(getBooleanIcon(cat.indoor), R.string.indoor),                    Pair("ÏŸ", fromCatEnergyLevel(cat.energyLevel)),                )            )))        } catch(e: HttpException) {            emit(RequestResource.Error(e.toErrorMessage()))        } catch(e: IOException) {            emit(RequestResource.Error(UiText.Resource(R.string.check_your_internet_connection)))        }    }    private fun fromCatEnergyLevel(energyLevel: Int): Int {        return when {            energyLevel < 3 -> R.string.few_energy            energyLevel < 7 -> R.string.medium_energy            else -> R.string.full_energy        }    }}