package com.example.jetpackcomposeassignment.feature_listcat.presentation.detailimport androidx.compose.foundation.layout.paddingimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Iconimport androidx.compose.material3.IconButtonimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.Surfaceimport androidx.compose.material3.Textimport androidx.compose.material3.TopAppBarimport androidx.compose.material3.TopAppBarDefaultsimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.collectAsStateimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.res.stringResourceimport androidx.hilt.navigation.compose.hiltViewModelimport androidx.navigation.NavHostControllerimport com.example.jetpackcomposeassignment.Rimport com.example.jetpackcomposeassignment.common.composable.ProgressComponentimport com.example.jetpackcomposeassignment.common.composable.TryAgainComponentimport com.example.jetpackcomposeassignment.feature_listcat.presentation.cats.CatStateimport androidx.compose.ui.platform.LocalLifecycleOwnerimport androidx.lifecycle.Lifecycleimport androidx.lifecycle.repeatOnLifecycle@OptIn(ExperimentalMaterial3Api::class)@Composablefun CatDetailsScreen(    id: String,    navController: NavHostController,    catViewModel: CatDetailViewModel = hiltViewModel(),) {    val state = catViewModel.catState.collectAsState()    val lifecycle = LocalLifecycleOwner.current.lifecycle    var alpha by remember { mutableStateOf(0.1F) }    LaunchedEffect(key1 = id) {        lifecycle.repeatOnLifecycle(state = Lifecycle.State.STARTED) {            catViewModel.on(CatDetailEvent.FindOneCat(id))        }    }    Scaffold(        topBar = {            TopAppBar(                title = {                    Text(stringResource(id = R.string.cat_detail_title), color = Color.White)                },                navigationIcon = {                    IconButton(onClick = { navController.popBackStack() }) {                        Icon(                            tint = Color.White,                            imageVector = Icons.Default.ArrowBack,                            contentDescription = "Back",                        )                    }                },                colors = TopAppBarDefaults.smallTopAppBarColors(containerColor = Color.Black.copy(alpha) )            )        },        content = { padding ->                when(state.value) {                    is CatState.Loading -> ProgressComponent()                    is CatState.CatSuccess -> CatDetailComponent((state.value as CatState.CatSuccess).cat) {                        alpha = it                    }                    is CatState.TryAgain -> Surface(modifier = Modifier.padding(padding)) {                        TryAgainComponent(((state.value as CatState.TryAgain).errorMessage))                    }                }        }    )}