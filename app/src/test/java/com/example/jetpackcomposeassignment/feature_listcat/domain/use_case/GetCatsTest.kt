package com.example.jetpackcomposeassignment.feature_listcat.domain.use_caseimport com.example.jetpackcomposeassignment.common.RequestResourceimport com.example.jetpackcomposeassignment.common.UiTextimport com.example.jetpackcomposeassignment.feature_listcat.data.model.Catimport com.example.jetpackcomposeassignment.feature_listcat.data.repository_remote.CatRepositoryimport com.example.jetpackcomposeassignment.feature_listcat.util.assertInstanceOfimport com.example.jetpackcomposeassignment.feature_listcat.util.assertSameClassimport com.example.jetpackcomposeassignment.feature_listcat.util.getHttpExceptionMessageimport com.example.jetpackcomposeassignment.feature_listcat.util.getIOExceptionMessageimport io.mockk.coEveryimport io.mockk.everyimport io.mockk.mockkimport kotlinx.coroutines.ExperimentalCoroutinesApiimport kotlinx.coroutines.flow.toListimport kotlinx.coroutines.test.runBlockingTestimport kotlinx.coroutines.test.runTestimport org.junit.Assert.assertEqualsimport org.junit.Testimport retrofit2.HttpExceptionimport retrofit2.Responseimport java.io.IOException@OptIn(ExperimentalCoroutinesApi::class)class GetCatsTest {    private val repository: CatRepository = mockk()    private val getCats = GetCats(repository)    @Test    fun `invoke should return RequestResource Success`() = runTest {        // Given        val fakeCats = listOf(Cat(id = "1", tags = listOf("Cute"), mimetype = "image/png"))        coEvery { repository.getCats() } returns fakeCats        // When        val result = getCats().toList()        // Then        assertEquals(2, result.size)        assertSameClass(RequestResource.Loading<List<Cat>>(), result[0])        assertSameClass(RequestResource.Success(fakeCats), result[1])        assertEquals(fakeCats.first().id, result[1].data!!.first().id)    }    @Test    fun `invoke should return RequestResource Fail IOException`() = runTest {        // Given        coEvery { repository.getCats() } throws IOException()        val uiTextExpected = getIOExceptionMessage()        // When        val result = getCats().toList()        // Then        assertEquals(2, result.size)        assertSameClass(RequestResource.Loading<List<Cat>>(), result[0])        assertSameClass(RequestResource.Error<List<Cat>>(message = uiTextExpected), result[1])        assertInstanceOf<UiText.Resource>(result[1].message)        assertEquals(uiTextExpected.id, (result[1].message as UiText.Resource).id)    }    @Test    fun `invoke should return RequestResource Fail HttpException`() = runTest {        // Given        val response = mockk<Response<*>>(            relaxed = true        )        val message = "error message";        every { response.message() } returns message        every { response.code() } returns 500        coEvery { repository.getCats() } throws HttpException(response)        val uiTextExpected = getHttpExceptionMessage(message)        // When        val result = getCats().toList()        // Then        assertEquals(2, result.size)        assertSameClass(RequestResource.Loading<List<Cat>>(), result[0])        assertSameClass(RequestResource.Error<List<Cat>>(message = uiTextExpected), result[1])        assertSameClass(uiTextExpected, result[1].message)        assertInstanceOf<UiText.Dynamic>(result[1].message)    }}