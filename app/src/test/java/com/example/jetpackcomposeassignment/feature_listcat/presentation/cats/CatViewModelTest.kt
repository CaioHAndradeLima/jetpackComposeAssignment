package com.example.jetpackcomposeassignment.feature_listcat.presentation.catsimport com.example.jetpackcomposeassignment.common.RequestResourceimport com.example.jetpackcomposeassignment.common.UiTextimport com.example.jetpackcomposeassignment.feature_listcat.data.model.Catimport com.example.jetpackcomposeassignment.feature_listcat.domain.CatUseCasesimport com.example.jetpackcomposeassignment.feature_listcat.util.assertInstanceOfimport io.mockk.clearAllMocksimport io.mockk.coEveryimport io.mockk.everyimport io.mockk.mockkimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.ExperimentalCoroutinesApiimport kotlinx.coroutines.cancelimport kotlinx.coroutines.flow.flowOfimport kotlinx.coroutines.test.TestCoroutineDispatcherimport kotlinx.coroutines.test.UnconfinedTestDispatcherimport kotlinx.coroutines.test.resetMainimport kotlinx.coroutines.test.runTestimport kotlinx.coroutines.test.setMainimport org.junit.Afterimport org.junit.Assert.assertSameimport org.junit.Beforeimport org.junit.Test@OptIn(ExperimentalCoroutinesApi::class)class CatViewModelTest {    private lateinit var catUseCases: CatUseCases    private lateinit var catViewModel: CatViewModel    private val testDispatcher = UnconfinedTestDispatcher()    @Before    fun setup() {        Dispatchers.setMain(testDispatcher)        catUseCases = mockk(relaxed = true)        catViewModel = CatViewModel(catUseCases)    }    @After    fun tearDown() {        Dispatchers.resetMain()        testDispatcher.cancel()        clearAllMocks()    }    @Test    fun `should update catListState on successful cat list retrieval`() = runTest {        // Arrange        val catListMock = listOf(Cat("1", null, null), Cat("2", null, null))        val successResult = RequestResource.Success(catListMock)        every { catUseCases.getCats() } returns flowOf(successResult)        // Act        catViewModel.on(CatEvent.Start)        // Assert        assertInstanceOf<CatListState.CatListSuccess>(catViewModel.catListState.value)        assertSame(            catListMock,            (catViewModel.catListState.value as CatListState.CatListSuccess).cats        )    }    @Test    fun `should update catListState on error during cat list retrieval`() = runTest {        // Arrange        val uiText = UiText.Dynamic("Some error message")        val errorResult = RequestResource.Error<List<Cat>>(            message = uiText        )        coEvery { catUseCases.getCats() } returns flowOf(errorResult)        // Act        catViewModel.on(CatEvent.Start)        // Assert        assertInstanceOf<CatListState.TryAgain>(catViewModel.catListState.value)        assertSame(            uiText,            (catViewModel.catListState.value as CatListState.TryAgain).errorMessage        )    }    @Test    fun `should update catListState on loading during cat list retrieval`() = runTest {        // Arrange        val loadingResult = RequestResource.Loading<List<Cat>>()        coEvery { catUseCases.getCats() } returns flowOf(loadingResult)        // Act        catViewModel.on(CatEvent.Start)        // Assert        assertInstanceOf<CatListState.Loading>(catViewModel.catListState.value)    }}