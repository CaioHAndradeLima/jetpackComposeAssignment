package com.example.jetpackcomposeassignment.feature_listcat.presentation.detailimport android.content.Contextimport androidx.compose.ui.test.assertIsDisplayedimport androidx.compose.ui.test.junit4.createComposeRuleimport androidx.compose.ui.test.onNodeWithContentDescriptionimport androidx.compose.ui.test.onNodeWithTextimport androidx.compose.ui.test.performClickimport androidx.test.platform.app.InstrumentationRegistryimport com.example.jetpackcomposeassignment.Rimport com.example.jetpackcomposeassignment.common.RequestResourceimport com.example.jetpackcomposeassignment.common.UiTextimport com.example.jetpackcomposeassignment.feature_listcat.data.model.Catimport com.example.jetpackcomposeassignment.feature_listcat.domain.CatUseCasesimport com.example.jetpackcomposeassignment.feature_listcat.domain.use_case.GetCatimport com.example.jetpackcomposeassignment.feature_listcat.domain.use_case.GetCatsimport com.example.jetpackcomposeassignment.feature_listcat.presentation.cats.CatViewModelimport com.example.jetpackcomposeassignment.feature_listcat.presentation.cats.composable.CatListScreenimport io.mockk.everyimport io.mockk.mockkimport junit.framework.TestCaseimport kotlinx.coroutines.flow.flowOfimport kotlinx.coroutines.test.runTestimport org.junit.Ruleimport org.junit.Testinternal class CatDetailScreenTest {    @get:Rule    val composeTestRule = createComposeRule()    private val context: Context = InstrumentationRegistry.getInstrumentation().targetContext    @Test    fun whenOpenCatPictureAndTap_ShouldCallAction() = runTest {        val getCat = mockk<GetCat>()        val useCase = CatUseCases(            mockk(), getCat        )        val id = "MfHpIfFxibiqr8Wh"        every { getCat.invoke(id) } returns flowOf(            RequestResource.Success(                Cat(id, listOf("cute"), null)            )        )        composeTestRule.setContent {            CatDetailsScreen(id, mockk(), CatDetailViewModel(useCase))        }        composeTestRule.onNodeWithText(            "cute"        ).assertIsDisplayed()    }    @Test    fun whenFailRequest_ShouldShowTryAgainComponent() = runTest {        val getCat = mockk<GetCat>()        val useCase = CatUseCases(            mockk(), getCat        )        val uiText = UiText.Dynamic("Error message")        val id = "MfHpIfFxibiqr8Wh"        every { getCat.invoke(id) } returns flowOf(            RequestResource.Error(                message = uiText            )        )        composeTestRule.setContent {            CatDetailsScreen(id, mockk(), CatDetailViewModel(useCase))        }        composeTestRule.onNodeWithText(uiText.text).assertExists()        composeTestRule.onNodeWithText(uiText.text).assertIsDisplayed()    }}