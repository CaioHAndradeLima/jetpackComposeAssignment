package com.example.jetpackcomposeassignment.feature_listcat.presentation.cats.composableimport android.content.Contextimport androidx.compose.ui.res.stringResourceimport androidx.compose.ui.test.assertIsDisplayedimport androidx.compose.ui.test.junit4.createComposeRuleimport androidx.compose.ui.test.onAllNodesWithContentDescriptionimport androidx.compose.ui.test.onNodeWithContentDescriptionimport androidx.compose.ui.test.onNodeWithTextimport androidx.compose.ui.test.performClickimport androidx.hilt.navigation.compose.hiltViewModelimport androidx.test.ext.junit.runners.AndroidJUnit4import androidx.test.platform.app.InstrumentationRegistryimport com.example.jetpackcomposeassignment.Rimport com.example.jetpackcomposeassignment.common.RequestResourceimport com.example.jetpackcomposeassignment.common.UiTextimport com.example.jetpackcomposeassignment.common.composable.TryAgainComponentimport com.example.jetpackcomposeassignment.feature_listcat.data.model.Catimport com.example.jetpackcomposeassignment.feature_listcat.domain.CatUseCasesimport com.example.jetpackcomposeassignment.feature_listcat.domain.use_case.GetCatsimport com.example.jetpackcomposeassignment.feature_listcat.presentation.cats.CatViewModelimport dagger.hilt.android.testing.HiltAndroidRuleimport dagger.hilt.android.testing.HiltAndroidTestimport io.mockk.everyimport io.mockk.mockkimport junit.framework.TestCase.assertTrueimport kotlinx.coroutines.ExperimentalCoroutinesApiimport kotlinx.coroutines.flow.flowOfimport kotlinx.coroutines.test.runTestimport org.junit.Ruleimport org.junit.Testimport org.junit.runner.RunWith@OptIn(ExperimentalCoroutinesApi::class)internal class CatListScreenTest {    @get:Rule    val composeTestRule = createComposeRule()    private val context: Context = InstrumentationRegistry.getInstrumentation().targetContext    @Test    fun whenOpenCatPictureAndTap_ShouldCallAction() = runTest {        val getCats = mockk<GetCats>()        val useCase = CatUseCases(            getCats, mockk()        )        every { getCats.invoke() } returns flowOf(            RequestResource.Success(listOf(                Cat("MfHpIfFxibiqr8Wh", listOf("cute"), null)            ))        )        var action = false        composeTestRule.setContent {            CatListScreen({                action = true            }, CatViewModel(useCase))        }        composeTestRule.onNodeWithContentDescription(context.getString(R.string.cat_image_accessibility)).assertExists()        composeTestRule.onNodeWithContentDescription(context.getString(R.string.cat_image_accessibility)).performClick()        assertTrue(action)    }    @Test    fun whenFailRequest_ShouldShowTryAgainComponent() = runTest {        val getCats = mockk<GetCats>()        val useCase = CatUseCases(            getCats, mockk()        )        val uiText = UiText.Dynamic("Error message")        every { getCats.invoke() } returns flowOf(            RequestResource.Error(                message = uiText            )        )        composeTestRule.setContent {            CatListScreen({}, CatViewModel(useCase))        }        composeTestRule.onNodeWithText(uiText.text).assertExists()        composeTestRule.onNodeWithText(uiText.text).assertIsDisplayed()    }}