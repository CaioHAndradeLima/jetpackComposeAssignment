package com.example.jetpackcomposeassignmentimport com.example.jetpackcomposeassignment.common.CatUrlimport com.example.jetpackcomposeassignment.di.AppModuleimport com.example.jetpackcomposeassignment.feature_listcat.data.repository_remote.CatApiimport com.example.jetpackcomposeassignment.feature_listcat.data.repository_remote.CatRepositoryimport com.example.jetpackcomposeassignment.feature_listcat.domain.CatUseCasesimport com.example.jetpackcomposeassignment.feature_listcat.domain.repository.CatRepositoryImplimport com.example.jetpackcomposeassignment.feature_listcat.domain.use_case.GetCatimport com.example.jetpackcomposeassignment.feature_listcat.domain.use_case.GetCatsimport com.example.jetpackcomposeassignment.feature_listcat.presentation.cats.CatViewModelimport com.example.jetpackcomposeassignment.feature_listcat.presentation.detail.CatDetailViewModelimport dagger.Moduleimport dagger.Providesimport dagger.hilt.components.SingletonComponentimport dagger.hilt.testing.TestInstallInimport io.mockk.impl.annotations.SpyKimport io.mockk.spykimport retrofit2.Retrofitimport retrofit2.converter.gson.GsonConverterFactoryimport javax.inject.Singleton@Module@TestInstallIn(    components = [SingletonComponent::class],    replaces = [AppModule::class])class AppModuleTest {    @Provides    @Singleton    fun provideApi(): CatApi {        return spyk()    }    @Provides    @Singleton    fun provideCatRepository(api: CatApi): CatRepository {        return CatRepositoryImpl(api)    }    @Provides    fun provideViewModel(cases: CatUseCases): CatViewModel {        return CatViewModel(cases)    }    @Provides    @Singleton    fun provideCatUseCase(repository: CatRepository): CatUseCases {        return CatUseCases(            getCats = GetCats(repository),            getOneCat = GetCat(repository)        )    }    @Provides    fun provideDetailViewModel(cases: CatUseCases): CatDetailViewModel {        return CatDetailViewModel(cases)    }}